desc "Fill the database tables with some sample data"
task sample_data: :environment do
  if Rails.env.development?
    ActiveRecord::Base.transaction do
      # Clear existing records to avoid duplicates and foreign key constraints
      # OrderItem.delete_all
      Product.delete_all
      InventoryTransaction.delete_all
      Order.delete_all
      StorageLocation.delete_all
      Report.delete_all
      # Role.delete_all
      User.delete_all
      Supplier.delete_all
    end

    # Seed Categories table with sample data
    10.times do
      Category.create(
        name: Faker::Commerce.department,
        description: Faker::Lorem.sentence,
        subcategory: Faker::Commerce.department,
      )
    end

    25.times do
      Subcategory.create(
        name: Faker::Commerce.department,
        description: Faker::Lorem.sentence,
        category: Category.all.sample,
      )
    end

    # Seed InventoryTransactions table with sample data
    20.times do
      InventoryTransaction.create(
        transaction_type: %w(incoming_return outgoing_return incoming_sale outgoing_sale).sample,
        quantity: Faker::Number.between(from: 1, to: 100),
      )
    end

    # Seed Locations table with sample data
    10.times do
      StorageLocation.create(
        name: Faker::Address.community,
        description: Faker::Lorem.sentence,
        address: Faker::Address.full_address,
      )
    end

    # Create an array with 10 instances of addresses from Location.address.sample
    location_addresses = StorageLocation.pluck(:address).sample(10)

    # Create an array with 5 instances of addresses generated by Faker
    faker_addresses = 5.times.map { Faker::Address.full_address }

    # Combine the arrays
    addresses = location_addresses + faker_addresses

    # Seed Orders table with sample data
    15.times do
      sending_address = addresses.sample
      receiving_address = addresses.sample

      # Ensure that at least one of the addresses matches a Location.address
      while !(StorageLocation.exists?(address: sending_address) || StorageLocation.exists?(address: receiving_address))
        sending_address = addresses.sample
        receiving_address = addresses.sample
      end

      Order.create(
        expected_delivery: Faker::Time.forward(days: 30),
        status: %w(delivered processing in_transit).sample,
        description: "#{["FedEx", "UPS", "USPS"].sample} tracking ##{rand(1000000000000)}",
        sending_address: sending_address,
        receiving_address: receiving_address,
      )
    end

    # Seed Reports table with sample data (probably not gonna use this but just in case)
    10.times do
      Report.create(
        report_type: Faker::Lorem.word,
        date: Faker::Time.backward(days: 90),
        data_criteria: Faker::Lorem.sentence,
      )
    end

    # Seed Roles table with sample data (probably not gonna use this either but just in case)
    # 5.times do
    #   Role.create(
    #     admin_id: Faker::Number.between(from: 1, to: 10),
    #     staff_id: Faker::Number.between(from: 1, to: 10),
    #     manager_id: Faker::Number.between(from: 1, to: 10),
    #   )
    # end

    # Seed Suppliers table with sample data
    10.times do
      Supplier.create(
        name: Faker::Company.name,
        address: Faker::Address.full_address,
        contact_info: Faker::Internet.email,
        description: Faker::Company.catch_phrase,
        standing: %w(good arrears).sample,
      )
    end

    # Seed Users table with sample data
    20.times do
      User.create(
        email: Faker::Internet.email,
        password: "password",
        role: %w(admin staff manager).sample,
        bio: Faker::Lorem.paragraph,
        first_name: Faker::Name.first_name,
        last_name: Faker::Name.last_name,
        # image: Faker::Avatar.image,
      )
    end

    50.times do
      Product.create(
        name: Faker::Commerce.product_name,
        description: Faker::Lorem.sentence,
        sku: Faker::Number.number(digits: 6),
        price: Faker::Commerce.price(range: 10.0..100.0),
        stock_quantity: Faker::Number.between(from: 0, to: 1000),
        category_id: Faker::Number.between(from: 1, to: 9),
        subcategory_id: Faker::Number.between(from: 1, to: 24),
        supplier_id: Faker::Number.between(from: 1, to: 9),
      )
    end

    User.create(

      first_name: "Alice",
      last_name: "Smith",
      email: "alice@smith.com",
      password: "password",
      role: "admin",
      bio: Faker::Lorem.paragraph,
    )

    puts "Sample data has been seeded into the database."
  end
end

# task :seed_products => :environment do
#   begin
#     product = Product.new(
#       name: Faker::Commerce.product_name,
#       description: Faker::Lorem.sentence,
#       sku: Faker::Number.unique.number(digits: 6),
#       price: Faker::Commerce.price(range: 10.0..100.0),
#       stock_quantity: Faker::Number.between(from: 0, to: 1000),
#       category_id: Faker::Number.between(from: 1, to: 10),
#       subcategory_id: Faker::Number.between(from: 1, to: 25),
#       supplier_id: Faker::Number.between(from: 1, to: 10),
#     )

#     if product.valid?
#       product.save
#       puts "Product created successfully."
#     else
#       puts "Product validation failed: #{product.errors.full_messages.join(", ")}"
#     end
#   rescue => e
#     puts "Error creating product: #{e.message}"
#   end
# end

# Seed OrderItems table with sample data
# 30.times do
#   OrderItem.create(
#     quantity_ordered: Faker::Number.between(from: 1, to: 20),
#     unit_price_id: Product.price,
#     shipping_cost_id: Faker::Number.between(from: 1, to: 30),
#   )
# end
