<!--/workspaces/Inventory-Management-System/app/views/orders/_form.html.erb-->
<script async defer
  src="https://maps.googleapis.com/maps/api/js?key=<%= ENV.fetch("GMAPS_KEY") %>&libraries=places&callback=initMap"></script>

<%= form_with(model: order, multipart: true) do |form| %>
  <% if order.errors.any? %>
    <div style="color: red">
      <h2><%= pluralize(order.errors.count, "error") %> prohibited this order from being saved:</h2>

      <ul>
        <% order.errors.each do |error| %>
          <li><%= error.full_message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <%= form.hidden_field :company_id, value: current_user.company_id %>

  <%= form.hidden_field :branch_id, value: current_user.branch_id %>

  <div>
    <%= form.label :expected_delivery, style: "display: block" %>
    <%= form.date_field :expected_delivery, required: true %>
  </div>

  <div>
    <%= form.label :status, style: "display: block" %>
    <%= form.select :status, ['Processing', 'In Transit', 'Delivered'], required: true %>
  </div>

  <div>
    <%= form.label :sending_address, style: "display: block" %>
    <% if order.new_record? %>
      <%= form.collection_select :sending_address, StorageLocation.all, :address, :address %>
    <% else %>
      <%= form.text_field :sending_address, required: true %>
    <% end %>
  </div>

  <div>
    <%= form.label :receiving_address, style: "display: block" %>
    <%= form.text_field :receiving_address, id: "receiving_address", class: "google-places-autocomplete", placeholder: "Enter an address", style: "width: 350px;", required: true %>
  </div>

  <div>
    <%= form.label :description, style: "display: block" %>
    <%= form.text_field :description, required: true %>
  </div>
  <p>
    <script>
      function initMap() {
        var input = document.getElementById('receiving_address');

        if (!input) {
          console.error("Could not find the 'receiving_address' input field.");
          return;
        }

        if (!window.google || !window.google.maps || !window.google.maps.places) {
          console.error("Google Maps API or Places library not loaded.");
          return;
        }

        var autocomplete = new google.maps.places.Autocomplete(input, { types: ['geocode'], apiKey: '<%= ENV.fetch("GMAPS_KEY") %>' });

        autocomplete.addListener('place_changed', function() {
          var place = autocomplete.getPlace();
          console.log(place); // Log the place details to check if it's working as expected
        });
      }
                $(document).ready(function() {
                  var isNewOrder = <%= order.new_record? ? 'true' : 'false' %>;
                  var orderId = <%= order.new_record? ? 'null' : order.id %>;

                  $('#new-order-products-table').DataTable({
                    processing: true,
                    serverSide: true,
                    ajax: {
                      url: '<%= new_order_path(format: :json) %>',
                      type: 'GET',
                          data: {
                isNewOrder: isNewOrder,
                orderId: orderId
                    }
                    },
                 columns: [
                      {
                         data: 'checkbox',
      render: function(data, type, row, meta) {
        // Use the data to determine whether to check the checkbox and disable fields
        var checked = data === 'checked' ? 'checked' : '';
        return `<input type="checkbox" name="order[order_products_attributes][${meta.row}][product_id]" value="${row.id}" class="product-checkbox" ${checked}>`;
      },
      orderable: true
          },
                      { data: 'id' },
                      { data: 'name' },
                      { data: 'sku' },
                      { data: 'price' },
                      { data: 'stock_quantity' },
                      { data: 'supplier' },
       {
      data: 'quantity_ordered',
      render: function(data, type, row, meta) {
        return `<input type="number" name="order[order_products_attributes][${meta.row}][quantity_ordered]" value="${data ? data : ''}" class="form quantity-ordered" ${row.disabled}>`;
      }
          },
          // Shipping Cost column
          {
      data: 'shipping_cost',
      render: function(data, type, row, meta) {
        return `<input type="number" name="order[order_products_attributes][${meta.row}][shipping_cost]" value="${data ? data : ''}" class="form shipping-cost" ${row.disabled}>`;
      }
          },
          // Transaction Type column
          {
      data: 'transaction_type',
      render: function(data, type, row, meta) {
        var selected = function(optionValue) {
          return data === optionValue ? 'selected' : '';
        };
        return `<select name="order[order_products_attributes][${meta.row}][transaction_type]" class="form transaction-type" ${row.disabled}>
                          <option value=""></option>
                  <option value="sale_to_customer" ${selected('sale_to_customer')}>Sale to customer</option>
                  <option value="purchase_from_supplier" ${selected('purchase_from_supplier')}>Purchase from supplier</option>
                  <option value="refund_to_customer" ${selected('refund_to_customer')}>Refund to customer</option>
                  <option value="return_to_supplier" ${selected('return_to_supplier')}>Return to supplier</option>
                  <option value="stock_loss" ${selected('stock_loss')}>Stock loss</option>
                </select>`;
      }
          },

                    ],
                    drawCallback: function(settings) {
                      // This will run every time the table is drawn/re-drawn
                      // Here we can disable the inputs
                      $('input[name$="[quantity_ordered]"], input[name$="[shipping_cost]"], select[name$="[transaction_type]"]').prop('disabled', true);
                    }
                  });

                  // Handle remove product click with delegated event handling
                  $('#new-order-products-table').on('click', '.remove-product', function() {
                    var row = $(this).closest('tr');
                    var productId = row.find('input[name$="[product_id]"]').val();
                    table.row(row).remove().draw(false);
                    // Disable inputs for removed product (if needed)
                  });

                  // Handle checkbox change with delegated event handling
                  $('#new-order-products-table').on('change', 'input[type="checkbox"]', function() {
                    var checkbox = $(this);
                    var fields = checkbox.closest('tr').find('input[name$="[quantity_ordered]"], input[name$="[shipping_cost]"], select[name$="[transaction_type]"]');
                    fields.prop('disabled', !checkbox.prop('checked'));
                  });
                });
    </script>

    <div class="card shadow mb-4">
      <div class="card-header py-3">
        <div class="d-flex justify-content-between align-items-center">
          <h6 class="m-0 font-weight-regular text-black">Products</h6>
        </div>
      </div>
      <div class="card-body">
        <div class="table-responsive">
          <table class="table datatable-bordered" id="new-order-products-table" width="100%" cellspacing="0">
            <thead class="datatable-header">
              <tr>
                <th></th>
                <th>ID</th>
                <th>Name</th>
                <th>SKU</th>
                <th>Price</th>
                <th>Stock Quantity</th>
                <th>Supplier</th>
                <th>Quantity Ordered</th>
                <th>Shipping Cost</th>
                <th>Transaction Type</th>

              </tr>
            </thead>
            <tbody>
            </tbody>
          </table>
        </div>
      </div>
    </div>

    <div>
      <%= form.submit %>
    </div>

  <% end %>
